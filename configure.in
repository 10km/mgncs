#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.61)
AC_INIT([libmgncs], [1.0.6])
AC_CONFIG_SRCDIR([src/mctrls.c])

mgncs_MAJOR_VERSION=1
mgncs_MINOR_VERSION=0
mgncs_MICRO_VERSION=6
mgncs_INTERFACE_AGE=0
mgncs_BINARY_AGE=0
mgncs_VERSION=$mgncs_MAJOR_VERSION.$mgncs_MINOR_VERSION.$mgncs_MICRO_VERSION

AC_SUBST(mgncs_MAJOR_VERSION)
AC_SUBST(mgncs_MINOR_VERSION)
AC_SUBST(mgncs_MICRO_VERSION)
AC_SUBST(mgncs_INTERFACE_AGE)
AC_SUBST(mgncs_BINARY_AGE)
AC_SUBST(mgncs_VERSION)

AC_DEFINE_UNQUOTED(MGNCS_MAJOR_VERSION, $mgncs_MAJOR_VERSION,
            [Major version of mgncs])
AC_DEFINE_UNQUOTED(MGNCS_MINOR_VERSION, $mgncs_MINOR_VERSION,
            [Minor version of mgncs])
AC_DEFINE_UNQUOTED(MGNCS_MICRO_VERSION, $mgncs_MICRO_VERSION,
            [Micro version of mgncs])
AC_DEFINE_UNQUOTED(MGNCS_INTERFACE_AGE, $mgncs_INTERFACE_AGE,
            [Interface age of mgncs])
AC_DEFINE_UNQUOTED(MGNCS_BINARY_AGE, $mgncs_BINARY_AGE,
            [Binary age of mgncs])

# libtool versioning
LT_RELEASE=$mgncs_MAJOR_VERSION.$mgncs_MINOR_VERSION
LT_CURRENT=`expr $mgncs_MICRO_VERSION - $mgncs_INTERFACE_AGE`
LT_REVISION=$mgncs_INTERFACE_AGE
LT_AGE=`expr $mgncs_BINARY_AGE - $mgncs_INTERFACE_AGE`

AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

AC_CANONICAL_SYSTEM

dnl ========================================================================
# Checks for programs.
dnl AC_PROG_CC
AC_PROG_LD
AC_PROG_RANLIB
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

AM_INIT_AUTOMAKE(libmgncs,$mgncs_VERSION,-)
dnl ========================================================================
dnl Put the name and version of the package here

# Checks for libraries.

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([fcntl.h stdlib.h string.h sys/ioctl.h sys/time.h termio.h termios.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_STRUCT_TM

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_STAT
AC_FUNC_VPRINTF
AC_FUNC_ALLOCA
AC_CHECK_FUNCS([bzero dup2 getcwd memmove memset putenv strchr strdup strerror strstr strndup ftruncate mmap])

AM_CONFIG_HEADER(mgncsconfig.h)

dnl ===============================================
dnl System wide options
have_ctrlsuffix="yes"
enable_rdr_skin="yes"
enable_rdr_fashion="yes"
enable_rdr_flat="yes"
enable_dbedit="yes"

guibuilder_support="no"
oldmledit_support="no"
texteditor_support="yes"
textedittitle_support="no"
propname_support="no"
sqlite_support="no"
datasource_support="yes"
use_iconv="no"
xml_support="no"

AC_ARG_ENABLE(skinrdr, 
[ --enable-skinrdr          include skin renderer <default=yes>],
enable_rdr_skin=$enableval)

AC_ARG_ENABLE(fashionrdr,
[ --enable-fashionrdr       include fashion renderer <default=yes>],
enable_rdr_fashion=$enableval)

AC_ARG_ENABLE(flatrdr,
[ --enable-flatrdr          include flat renderer <default=yes>],
enable_rdr_flat=$enableval)

if test "x$enable_rdr_skin" = "xyes"; then
	AC_DEFINE(_MGNCS_RDR_SKIN, 1,
			[Define if include skin renderer])
fi

if test "x$enable_rdr_fashion" = "xyes"; then
	AC_DEFINE(_MGNCS_RDR_FASHION, 1,
		[Define if include fashion renderer])
fi

if test "x$enable_rdr_flat" = "xyes"; then
	AC_DEFINE(_MGNCS_RDR_FLAT, 1,
		[Define if include flat renderer])
fi

AC_ARG_ENABLE(ctrlsuffix, 
[ --enable-ctrlsuffix       have or not the prefix of ncs name<default=yes>],
have_ctrlsuffix=$enableval)

AC_ARG_ENABLE(property_name, 
[ --enable-propname         enable the property name support or not <default=no>],
propname_support=$enableval)


if test "x$propname_support" = "xyes"; then
	AC_DEFINE(_MGNCS_PROP_NAME, 1, 
		[Define if support property name])
fi

if test "x$have_ctrlsuffix" = "xyes"; 
then
	AC_DEFINE(_MGNCS_CLASS_SUFFIX, "_",
		[Define the control surfix name])
else
	AC_DEFINE(_MGNCS_CLASS_SUFFIX, "",
		[Define the control surfix name])
fi

AC_ARG_ENABLE(dbedit,
[  --enable-dbedit           use edit with double buffer support <default=yes>],
enable_dbedit=$enableval)

if test "x$enable_dbedit" = "xyes"; then
  AC_DEFINE(_MGNCS_USE_DBEDIT, 1,
            [Define if build NCS for using edit with double buffer ])
fi

AC_ARG_ENABLE(guibuilder-support,
[ --enable-guibuilder-support   new control set used to support guibuilder <default=no>],
guibuilder_support=$enableval)

if test "x$guibuilder_support" = "xyes"; then
	AC_DEFINE(_MGNCS_GUIBUILDER_SUPPORT, 1,
		[Define if support guibuilder])
fi

AC_ARG_ENABLE(old-mledit, 
[ --enable-old-mledit support the old multiline editor <default=no>],
oldmledit_support=$enableval)

if test "x$oldmledit_support" = "xyes"; then
	AC_DEFINE(_MGNCS_OLD_MLEDIT, 1,
			 [Define if support old multiline editor])
fi

AC_ARG_ENABLE(texteditor,
[ --enable-texteditor support the new texteditor <default=yes>],
texteditor_support=$enableval)

if test "x$texteditor_support" = "xyes"; then
	AC_DEFINE(_MGNCS_TEXTEDITOR, 1,
			  [Define if support new text editor])
fi

AC_ARG_ENABLE(textedittitle,
[ --enable-textedittitle support the title of new texteditor  <default=no>],
textedittitle_support=$enableval)

if test "x$textedittitle_support" = "xyes"; then
	AC_DEFINE(_MGNCS_TEXTEDITTITLE, 1,
			  [Define if support title of new text editor])
fi



AC_ARG_WITH(libsuffix,
  [  --with-libsuffix=ARG    configure the suffix of the library name.])

case "$with_libsuffix" in
    "")
        cfgfile="mgncs.cfg"
        MGNCS_LIBSUFFIX=""
        have_libsuffix="no"
    ;;
    *)
        cfgfile="mgncs.cfg"
        MGNCS_LIBSUFFIX="_$withval"
        have_libsuffix="yes"
    ;;
esac

AC_ARG_ENABLE(useiconv,
    [ --enable-useiconv enable the iconv as charset convertor <default=no>],
use_iconv=$enableval)

if test "x$use_iconv" = "xyes"; then
    AC_DEFINE(_MGNCS_USE_ICONV, 1,
              [Define if use iconv as charset convertor])
fi

AC_ARG_ENABLE(datasource,
[ --enable-datasource    enable datasource support <default=yes>],
datasource_support=$enableval)

if test "x$datasource_support" = "xyes"; then
	AC_DEFINE(_MGNCS_DATASOURCE, 1,
		[Define if support datasource])
fi

AC_ARG_ENABLE(sqlite,
[ --enable-sqlite     enable sqlite datasource support <default=no>],
sqlite_support=$enableval)

if test "x$sqlite_support" = "xyes"; then
	AC_DEFINE(_MGNCS_SQLITE, 1,
		[Define if support sqlite])
fi

AC_ARG_ENABLE(xml,
[ --enable-xml    enable libxml2 datasource support <default=no>],
xml_support=$enableval)

if test "x$xml_support" = "xyes"; then
	AC_DEFINE(_MGNCS_XML, 1,
		[Define if support xml])
fi

AC_DEFINE_UNQUOTED(MGNCS_ETCFILENAME, "${cfgfile}", [MGNCS configure file name])
AM_CONDITIONAL(MGNCS_HAVE_LIBSUFFIX, test "x$have_libsuffix" = "xyes")
AC_SUBST(MGNCS_LIBSUFFIX)
AC_DEFINE_UNQUOTED(_MGNCS_LIBSUFFIX, "${MGNCS_LIBSUFFIX}", [MGNCS library suffix])


dnl ========================================================================
dnl check for run-time mode of MiniGUI
dnl ========================================================================

have_libminigui="no"
AC_CHECK_HEADERS(minigui/common.h, have_libminigui=yes, foo=bar)

threads_version="no"
AC_CHECK_DECLS(_MGRM_THREADS, threads_version="yes", foo=bar, [#include <minigui/common.h>])

procs_version="no"
AC_CHECK_DECLS(_MGRM_PROCESSES, procs_version="yes", foo=bar, [#include <minigui/common.h>])

standalone_version="no"
AC_CHECK_DECLS(_MGRM_STANDALONE, standalone_version="yes", foo=bar, [#include <minigui/common.h>])


if test "x$threads_version" = "xyes"; then
   	CFLAGS="$CFLAGS -D_REENTRANT"
    if test "x$have_libsuffix" = "xno"; then
        APP_LIBS="$APP_LIBS -lminigui_ths"
    fi
else
	if test "x$standalone_version" = "xyes"; then
        if test "x$have_libsuffix" = "xno"; then
            APP_LIBS="$APP_LIBS -lminigui_sa"
        fi
   	else
        if test "x$have_libsuffix" = "xno"; then
            APP_LIBS="$APP_LIBS -lminigui_procs"
        fi
   	fi  
fi

if test "x$have_libsuffix" = "xyes"; then
    APP_LIBS="$APP_LIBS -lminigui_msd"
fi

if test "x$threads_version" != "xyes"; then
    lib_pthread="yes"
    AC_CHECK_DECLS(_MGGAL_SHADOW, APP_LIBS="$APP_LIBS -lpthread", lib_pthread="no", [#include <minigui/common.h>])
    if test "x$lib_pthread" = "xno"; then
        AC_CHECK_DECLS(_MGGAL_MLSHADOW, APP_LIBS="$APP_LIBS -lpthread", no_pthread="no", [#include <minigui/common.h>])
    fi
else
	APP_LIBS="$APP_LIBS -lpthread"
fi

if test "x$sqlite_support" = "xyes"; then
	APP_LIBS="$APP_LIBS -lsqlite3"
fi

if test "x$xml_support" = "xyes"; then
	APP_LIBS="$APP_LIBS -lxml2"
    CFLAGS="$CFLAGS -I/usr/include/libxml2"
fi

CFLAGS="$CFLAGS -D__MGNCS_LIB__"

AC_CHECK_DECLS(_HAVE_MATH_LIB, APP_LIBS="$APP_LIBS -lm", foo=bar, [#include <minigui/common.h>])
AC_CHECK_DECLS(_MGIMAGE_PNG, APP_LIBS="$APP_LIBS -lpng", foo=bar, [#include <minigui/common.h>])
AC_CHECK_DECLS(_MGIMAGE_JPG, APP_LIBS="$APP_LIBS -ljpeg", foo=bar, [#include <minigui/common.h>])
AC_CHECK_DECLS(_MGFONT_TTF, APP_LIBS="$APP_LIBS -lttf", foo=bar, [#include <minigui/common.h>])
AC_CHECK_DECLS(_MGFONT_FT2, APP_LIBS="$APP_LIBS -lfreetype", foo=bar, [#include <minigui/common.h>])
AC_CHECK_DECLS(_MGIAL_DLCUSTOM, APP_LIBS="$APP_LIBS -ldl", foo=bar, [#include <minigui/common.h>])

if test "$ac_cv_prog_gcc" = "yes"; then
    CFLAGS="$CFLAGS -Wall -Wstrict-prototypes -pipe"
fi

AC_SUBST(APP_LIBS)

AC_CONFIG_FILES([Makefile
                 include/Makefile
                 include/pieces/Makefile
                 src/Makefile
                 src/renderer/Makefile
                 src/renderer/classic/Makefile
                 src/renderer/skin/Makefile
                 src/renderer/fashion/Makefile
                 src/renderer/flat/Makefile
                 src/pieces/Makefile
                 src/datasource/Makefile
                 src/ime/Makefile
                 etc/Makefile
                 build/Makefile
                 test/Makefile
                 test/databinding/Makefile
                 test/datasource/Makefile
                 test/imetest/Makefile])
AC_OUTPUT

if test "x$have_libminigui" != "xyes"; then
    AC_MSG_WARN([
        MiniGUI is not properly installed on the system. You need 
        MiniGUI Ver 3.0.2 or later for building this package. 
        Please configure and install MiniGUI Ver 3.0.2 first.
    ])
fi

